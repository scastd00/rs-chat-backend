package ule.chat.model.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import ule.chat.model.Degree;
import ule.chat.model.User;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

/**
 * Class _Subject was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Subject extends BaseDataObject {

	private static final long serialVersionUID = 1L;

	public static final String ID_PK_COLUMN = "id";

	public static final Property<Short> CREDITS = Property.create("credits", Short.class);
	public static final Property<Short> GRADE = Property.create("grade", Short.class);
	public static final Property<String> NAME = Property.create("name", String.class);
	public static final Property<String> SUBJ_PERIOD = Property.create("subjPeriod", String.class);
	public static final Property<String> TYPE = Property.create("type", String.class);
	public static final Property<Degree> DEGREE = Property.create("degree", Degree.class);
	public static final Property<List<User>> STUDENTS = Property.create("students", List.class);
	public static final Property<List<User>> TEACHERS = Property.create("teachers", List.class);

	protected short credits;
	protected short grade;
	protected String name;
	protected String subjPeriod;
	protected String type;

	protected Object degree;
	protected Object students;
	protected Object teachers;

	public void setCredits(short credits) {
		beforePropertyWrite("credits", this.credits, credits);
		this.credits = credits;
	}

	public short getCredits() {
		beforePropertyRead("credits");
		return this.credits;
	}

	public void setGrade(short grade) {
		beforePropertyWrite("grade", this.grade, grade);
		this.grade = grade;
	}

	public short getGrade() {
		beforePropertyRead("grade");
		return this.grade;
	}

	public void setName(String name) {
		beforePropertyWrite("name", this.name, name);
		this.name = name;
	}

	public String getName() {
		beforePropertyRead("name");
		return this.name;
	}

	public void setSubjPeriod(String subjPeriod) {
		beforePropertyWrite("subjPeriod", this.subjPeriod, subjPeriod);
		this.subjPeriod = subjPeriod;
	}

	public String getSubjPeriod() {
		beforePropertyRead("subjPeriod");
		return this.subjPeriod;
	}

	public void setType(String type) {
		beforePropertyWrite("type", this.type, type);
		this.type = type;
	}

	public String getType() {
		beforePropertyRead("type");
		return this.type;
	}

	public void setDegree(Degree degree) {
		setToOneTarget("degree", degree, true);
	}

	public Degree getDegree() {
		return (Degree) readProperty("degree");
	}

	public void addToStudents(User obj) {
		addToManyTarget("students", obj, true);
	}

	public void removeFromStudents(User obj) {
		removeToManyTarget("students", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<User> getStudents() {
		return (List<User>) readProperty("students");
	}

	public void addToTeachers(User obj) {
		addToManyTarget("teachers", obj, true);
	}

	public void removeFromTeachers(User obj) {
		removeToManyTarget("teachers", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<User> getTeachers() {
		return (List<User>) readProperty("teachers");
	}

	@Override
	public Object readPropertyDirectly(String propName) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "credits":
				return this.credits;
			case "grade":
				return this.grade;
			case "name":
				return this.name;
			case "subjPeriod":
				return this.subjPeriod;
			case "type":
				return this.type;
			case "degree":
				return this.degree;
			case "students":
				return this.students;
			case "teachers":
				return this.teachers;
			default:
				return super.readPropertyDirectly(propName);
		}
	}

	@Override
	public void writePropertyDirectly(String propName, Object val) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "credits":
				this.credits = val == null ? 0 : (short) val;
				break;
			case "grade":
				this.grade = val == null ? 0 : (short) val;
				break;
			case "name":
				this.name = (String) val;
				break;
			case "subjPeriod":
				this.subjPeriod = (String) val;
				break;
			case "type":
				this.type = (String) val;
				break;
			case "degree":
				this.degree = val;
				break;
			case "students":
				this.students = val;
				break;
			case "teachers":
				this.teachers = val;
				break;
			default:
				super.writePropertyDirectly(propName, val);
		}
	}

	private void writeObject(ObjectOutputStream out) throws IOException {
		writeSerialized(out);
	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
		readSerialized(in);
	}

	@Override
	protected void writeState(ObjectOutputStream out) throws IOException {
		super.writeState(out);
		out.writeShort(this.credits);
		out.writeShort(this.grade);
		out.writeObject(this.name);
		out.writeObject(this.subjPeriod);
		out.writeObject(this.type);
		out.writeObject(this.degree);
		out.writeObject(this.students);
		out.writeObject(this.teachers);
	}

	@Override
	protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
		super.readState(in);
		this.credits = in.readShort();
		this.grade = in.readShort();
		this.name = (String) in.readObject();
		this.subjPeriod = (String) in.readObject();
		this.type = (String) in.readObject();
		this.degree = in.readObject();
		this.students = in.readObject();
		this.teachers = in.readObject();
	}

}
