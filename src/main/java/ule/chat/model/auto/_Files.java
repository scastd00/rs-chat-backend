package ule.chat.model.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import ule.chat.model.Users;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

/**
 * Class _Files was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Files extends BaseDataObject {

	private static final long serialVersionUID = 1L;

	public static final String ID_PK_COLUMN = "id";

	public static final Property<LocalDateTime> DATE_UPLOADED = Property.create("dateUploaded", LocalDateTime.class);
	public static final Property<String> METADATA = Property.create("metadata", String.class);
	public static final Property<String> NAME = Property.create("name", String.class);
	public static final Property<String> PATH = Property.create("path", String.class);
	public static final Property<Integer> SIZE = Property.create("size", Integer.class);
	public static final Property<String> TYPE = Property.create("type", String.class);
	public static final Property<Users> USER = Property.create("user", Users.class);

	protected LocalDateTime dateUploaded;
	protected String metadata;
	protected String name;
	protected String path;
	protected int size;
	protected String type;

	protected Object user;

	public void setDateUploaded(LocalDateTime dateUploaded) {
		beforePropertyWrite("dateUploaded", this.dateUploaded, dateUploaded);
		this.dateUploaded = dateUploaded;
	}

	public LocalDateTime getDateUploaded() {
		beforePropertyRead("dateUploaded");
		return this.dateUploaded;
	}

	public void setMetadata(String metadata) {
		beforePropertyWrite("metadata", this.metadata, metadata);
		this.metadata = metadata;
	}

	public String getMetadata() {
		beforePropertyRead("metadata");
		return this.metadata;
	}

	public void setName(String name) {
		beforePropertyWrite("name", this.name, name);
		this.name = name;
	}

	public String getName() {
		beforePropertyRead("name");
		return this.name;
	}

	public void setPath(String path) {
		beforePropertyWrite("path", this.path, path);
		this.path = path;
	}

	public String getPath() {
		beforePropertyRead("path");
		return this.path;
	}

	public void setSize(int size) {
		beforePropertyWrite("size", this.size, size);
		this.size = size;
	}

	public int getSize() {
		beforePropertyRead("size");
		return this.size;
	}

	public void setType(String type) {
		beforePropertyWrite("type", this.type, type);
		this.type = type;
	}

	public String getType() {
		beforePropertyRead("type");
		return this.type;
	}

	public void setUser(Users user) {
		setToOneTarget("user", user, true);
	}

	public Users getUser() {
		return (Users) readProperty("user");
	}

	@Override
	public Object readPropertyDirectly(String propName) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "dateUploaded":
				return this.dateUploaded;
			case "metadata":
				return this.metadata;
			case "name":
				return this.name;
			case "path":
				return this.path;
			case "size":
				return this.size;
			case "type":
				return this.type;
			case "user":
				return this.user;
			default:
				return super.readPropertyDirectly(propName);
		}
	}

	@Override
	public void writePropertyDirectly(String propName, Object val) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "dateUploaded":
				this.dateUploaded = (LocalDateTime) val;
				break;
			case "metadata":
				this.metadata = (String) val;
				break;
			case "name":
				this.name = (String) val;
				break;
			case "path":
				this.path = (String) val;
				break;
			case "size":
				this.size = val == null ? 0 : (int) val;
				break;
			case "type":
				this.type = (String) val;
				break;
			case "user":
				this.user = val;
				break;
			default:
				super.writePropertyDirectly(propName, val);
		}
	}

	private void writeObject(ObjectOutputStream out) throws IOException {
		writeSerialized(out);
	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
		readSerialized(in);
	}

	@Override
	protected void writeState(ObjectOutputStream out) throws IOException {
		super.writeState(out);
		out.writeObject(this.dateUploaded);
		out.writeObject(this.metadata);
		out.writeObject(this.name);
		out.writeObject(this.path);
		out.writeInt(this.size);
		out.writeObject(this.type);
		out.writeObject(this.user);
	}

	@Override
	protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
		super.readState(in);
		this.dateUploaded = (LocalDateTime) in.readObject();
		this.metadata = (String) in.readObject();
		this.name = (String) in.readObject();
		this.path = (String) in.readObject();
		this.size = in.readInt();
		this.type = (String) in.readObject();
		this.user = in.readObject();
	}

}
