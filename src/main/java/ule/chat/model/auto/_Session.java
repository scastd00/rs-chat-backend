package ule.chat.model.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import ule.chat.model.User;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

/**
 * Class _Session was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Session extends BaseDataObject {

	private static final long serialVersionUID = 1L;

	public static final String ID_PK_COLUMN = "id";

	public static final Property<LocalDateTime> DATE_STARTED = Property.create("dateStarted", LocalDateTime.class);
	public static final Property<String> SRC_IP = Property.create("srcIp", String.class);
	public static final Property<String> TOKEN = Property.create("token", String.class);
	public static final Property<User> USER = Property.create("user", User.class);

	protected LocalDateTime dateStarted;
	protected String srcIp;
	protected String token;

	protected Object user;

	public void setDateStarted(LocalDateTime dateStarted) {
		beforePropertyWrite("dateStarted", this.dateStarted, dateStarted);
		this.dateStarted = dateStarted;
	}

	public LocalDateTime getDateStarted() {
		beforePropertyRead("dateStarted");
		return this.dateStarted;
	}

	public void setSrcIp(String srcIp) {
		beforePropertyWrite("srcIp", this.srcIp, srcIp);
		this.srcIp = srcIp;
	}

	public String getSrcIp() {
		beforePropertyRead("srcIp");
		return this.srcIp;
	}

	public void setToken(String token) {
		beforePropertyWrite("token", this.token, token);
		this.token = token;
	}

	public String getToken() {
		beforePropertyRead("token");
		return this.token;
	}

	public void setUser(User user) {
		setToOneTarget("user", user, true);
	}

	public User getUser() {
		return (User) readProperty("user");
	}

	@Override
	public Object readPropertyDirectly(String propName) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "dateStarted":
				return this.dateStarted;
			case "srcIp":
				return this.srcIp;
			case "token":
				return this.token;
			case "user":
				return this.user;
			default:
				return super.readPropertyDirectly(propName);
		}
	}

	@Override
	public void writePropertyDirectly(String propName, Object val) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "dateStarted":
				this.dateStarted = (LocalDateTime) val;
				break;
			case "srcIp":
				this.srcIp = (String) val;
				break;
			case "token":
				this.token = (String) val;
				break;
			case "user":
				this.user = val;
				break;
			default:
				super.writePropertyDirectly(propName, val);
		}
	}

	private void writeObject(ObjectOutputStream out) throws IOException {
		writeSerialized(out);
	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
		readSerialized(in);
	}

	@Override
	protected void writeState(ObjectOutputStream out) throws IOException {
		super.writeState(out);
		out.writeObject(this.dateStarted);
		out.writeObject(this.srcIp);
		out.writeObject(this.token);
		out.writeObject(this.user);
	}

	@Override
	protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
		super.readState(in);
		this.dateStarted = (LocalDateTime) in.readObject();
		this.srcIp = (String) in.readObject();
		this.token = (String) in.readObject();
		this.user = in.readObject();
	}

}
