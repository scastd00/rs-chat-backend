package ule.chat.model.auto;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;
import ule.chat.model.Files;
import ule.chat.model.Sessions;
import ule.chat.model.Subjects;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Class _Users was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Users extends BaseDataObject {

	private static final long serialVersionUID = 1L;

	public static final String ID_PK_COLUMN = "id";

	public static final Property<Short> AGE = Property.create("age", Short.class);
	public static final Property<LocalDate> BIRTHDATE = Property.create("birthdate", LocalDate.class);
	public static final Property<LocalDateTime> BLOCK_UNTIL = Property.create("blockUntil", LocalDateTime.class);
	public static final Property<String> EMAIL = Property.create("email", String.class);
	public static final Property<String> FULL_NAME = Property.create("fullName", String.class);
	public static final Property<byte[]> PASSWORD = Property.create("password", byte[].class);
	public static final Property<String> ROLE = Property.create("role", String.class);
	public static final Property<String> USERNAME = Property.create("username", String.class);
	public static final Property<List<Files>> FILES = Property.create("files", List.class);
	public static final Property<List<Sessions>> SESSIONS = Property.create("sessions", List.class);
	public static final Property<List<Subjects>> SUBJECTS_OF_STUDENT = Property.create("subjectsOfStudent", List.class);
	public static final Property<List<Subjects>> SUBJECTS_OF_TEACHER = Property.create("subjectsOfTeacher", List.class);

	protected Short age;
	protected LocalDate birthdate;
	protected LocalDateTime blockUntil;
	protected String email;
	protected String fullName;
	protected byte[] password;
	protected String role;
	protected String username;

	protected Object files;
	protected Object sessions;
	protected Object subjectsOfStudent;
	protected Object subjectsOfTeacher;

	public void setAge(short age) {
		beforePropertyWrite("age", this.age, age);
		this.age = age;
	}

	public short getAge() {
		beforePropertyRead("age");
		if (this.age == null) {
			return 0;
		}
		return this.age;
	}

	public void setBirthdate(LocalDate birthdate) {
		beforePropertyWrite("birthdate", this.birthdate, birthdate);
		this.birthdate = birthdate;
	}

	public LocalDate getBirthdate() {
		beforePropertyRead("birthdate");
		return this.birthdate;
	}

	public void setBlockUntil(LocalDateTime blockUntil) {
		beforePropertyWrite("blockUntil", this.blockUntil, blockUntil);
		this.blockUntil = blockUntil;
	}

	public LocalDateTime getBlockUntil() {
		beforePropertyRead("blockUntil");
		return this.blockUntil;
	}

	public void setEmail(String email) {
		beforePropertyWrite("email", this.email, email);
		this.email = email;
	}

	public String getEmail() {
		beforePropertyRead("email");
		return this.email;
	}

	public void setFullName(String fullName) {
		beforePropertyWrite("fullName", this.fullName, fullName);
		this.fullName = fullName;
	}

	public String getFullName() {
		beforePropertyRead("fullName");
		return this.fullName;
	}

	public void setPassword(byte[] password) {
		beforePropertyWrite("password", this.password, password);
		this.password = password;
	}

	public byte[] getPassword() {
		beforePropertyRead("password");
		return this.password;
	}

	public void setRole(String role) {
		beforePropertyWrite("role", this.role, role);
		this.role = role;
	}

	public String getRole() {
		beforePropertyRead("role");
		return this.role;
	}

	public void setUsername(String username) {
		beforePropertyWrite("username", this.username, username);
		this.username = username;
	}

	public String getUsername() {
		beforePropertyRead("username");
		return this.username;
	}

	public void addToFiles(Files obj) {
		addToManyTarget("files", obj, true);
	}

	public void removeFromFiles(Files obj) {
		removeToManyTarget("files", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Files> getFiles() {
		return (List<Files>) readProperty("files");
	}

	public void addToSessions(Sessions obj) {
		addToManyTarget("sessions", obj, true);
	}

	public void removeFromSessions(Sessions obj) {
		removeToManyTarget("sessions", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Sessions> getSessions() {
		return (List<Sessions>) readProperty("sessions");
	}

	public void addToSubjectsOfStudent(Subjects obj) {
		addToManyTarget("subjectsOfStudent", obj, true);
	}

	public void removeFromSubjectsOfStudent(Subjects obj) {
		removeToManyTarget("subjectsOfStudent", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Subjects> getSubjectsOfStudent() {
		return (List<Subjects>) readProperty("subjectsOfStudent");
	}

	public void addToSubjectsOfTeacher(Subjects obj) {
		addToManyTarget("subjectsOfTeacher", obj, true);
	}

	public void removeFromSubjectsOfTeacher(Subjects obj) {
		removeToManyTarget("subjectsOfTeacher", obj, true);
	}

	@SuppressWarnings("unchecked")
	public List<Subjects> getSubjectsOfTeacher() {
		return (List<Subjects>) readProperty("subjectsOfTeacher");
	}

	@Override
	public Object readPropertyDirectly(String propName) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "age":
				return this.age;
			case "birthdate":
				return this.birthdate;
			case "blockUntil":
				return this.blockUntil;
			case "email":
				return this.email;
			case "fullName":
				return this.fullName;
			case "password":
				return this.password;
			case "role":
				return this.role;
			case "username":
				return this.username;
			case "files":
				return this.files;
			case "sessions":
				return this.sessions;
			case "subjectsOfStudent":
				return this.subjectsOfStudent;
			case "subjectsOfTeacher":
				return this.subjectsOfTeacher;
			default:
				return super.readPropertyDirectly(propName);
		}
	}

	@Override
	public void writePropertyDirectly(String propName, Object val) {
		if (propName == null) {
			throw new IllegalArgumentException();
		}

		switch (propName) {
			case "age":
				this.age = (Short) val;
				break;
			case "birthdate":
				this.birthdate = (LocalDate) val;
				break;
			case "blockUntil":
				this.blockUntil = (LocalDateTime) val;
				break;
			case "email":
				this.email = (String) val;
				break;
			case "fullName":
				this.fullName = (String) val;
				break;
			case "password":
				this.password = (byte[]) val;
				break;
			case "role":
				this.role = (String) val;
				break;
			case "username":
				this.username = (String) val;
				break;
			case "files":
				this.files = val;
				break;
			case "sessions":
				this.sessions = val;
				break;
			case "subjectsOfStudent":
				this.subjectsOfStudent = val;
				break;
			case "subjectsOfTeacher":
				this.subjectsOfTeacher = val;
				break;
			default:
				super.writePropertyDirectly(propName, val);
		}
	}

	private void writeObject(ObjectOutputStream out) throws IOException {
		writeSerialized(out);
	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
		readSerialized(in);
	}

	@Override
	protected void writeState(ObjectOutputStream out) throws IOException {
		super.writeState(out);
		out.writeObject(this.age);
		out.writeObject(this.birthdate);
		out.writeObject(this.blockUntil);
		out.writeObject(this.email);
		out.writeObject(this.fullName);
		out.writeObject(this.password);
		out.writeObject(this.role);
		out.writeObject(this.username);
		out.writeObject(this.files);
		out.writeObject(this.sessions);
		out.writeObject(this.subjectsOfStudent);
		out.writeObject(this.subjectsOfTeacher);
	}

	@Override
	protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
		super.readState(in);
		this.age = (Short) in.readObject();
		this.birthdate = (LocalDate) in.readObject();
		this.blockUntil = (LocalDateTime) in.readObject();
		this.email = (String) in.readObject();
		this.fullName = (String) in.readObject();
		this.password = (byte[]) in.readObject();
		this.role = (String) in.readObject();
		this.username = (String) in.readObject();
		this.files = in.readObject();
		this.sessions = in.readObject();
		this.subjectsOfStudent = in.readObject();
		this.subjectsOfTeacher = in.readObject();
	}

}
